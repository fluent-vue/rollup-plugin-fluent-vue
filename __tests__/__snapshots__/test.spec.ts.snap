// Vitest Snapshot v1

exports[`rollup plugin > custom blockType 1`] = `
"'use strict';

var vue = require('vue');
var bundle = require('@fluent/bundle');

function render(_ctx, _cache) {
  return (vue.openBlock(), vue.createElementBlock(\\"div\\", null, [
    vue.createElementVNode(\\"div\\", null, vue.toDisplayString(_ctx.$t('hello-user', { userName: _ctx.userName })), 1 /* TEXT */),
    vue.createElementVNode(\\"div\\", null, vue.toDisplayString(_ctx.$t('shared-photos', { userName: _ctx.userName, photoCount: _ctx.photoCount, userGender: _ctx.userGender })), 1 /* TEXT */)
  ]))
}

function block0 (Component) {
  const target = Component.options || Component;
  target.fluent = target.fluent || {};
  target.fluent['en'] = new bundle.FluentResource(\`
# Simple things are simple.
hello-user = Hello, {$userName}!

# Complex things are possible.
shared-photos =
  {$userName} {$photoCount ->
     [one] added one photo
    *[other] added {$photoCount} new photos
  } to {$userGender ->
     [male] his stream
     [female] her stream
    *[other] their stream
  }.
\`);
}

const script = {};
if (typeof block0 === 'function') block0(script);

script.render = render;
script.__file = \\"__tests__/fixtures/blockType.vue\\";

module.exports = script;
"
`;

exports[`rollup plugin > errors with no locale attr 1`] = `[Error: Custom block does not have locale attribute]`;

exports[`rollup plugin > generates custom block code 1`] = `
"'use strict';

var vue = require('vue');
var bundle = require('@fluent/bundle');

function render(_ctx, _cache) {
  return (vue.openBlock(), vue.createElementBlock(\\"div\\", null, [
    vue.createElementVNode(\\"div\\", null, vue.toDisplayString(_ctx.$t('hello-user', { userName: _ctx.userName })), 1 /* TEXT */),
    vue.createElementVNode(\\"div\\", null, vue.toDisplayString(_ctx.$t('shared-photos', { userName: _ctx.userName, photoCount: _ctx.photoCount, userGender: _ctx.userGender })), 1 /* TEXT */)
  ]))
}

function block0 (Component) {
  const target = Component.options || Component;
  target.fluent = target.fluent || {};
  target.fluent['en'] = new bundle.FluentResource(\`
# Simple things are simple.
hello-user = Hello, {$userName}!

# Complex things are possible.
shared-photos =
  {$userName} {$photoCount ->
     [one] added one photo
    *[other] added {$photoCount} new photos
  } to {$userGender ->
     [male] his stream
     [female] her stream
    *[other] their stream
  }.
\`);
}

const script = {};
if (typeof block0 === 'function') block0(script);

script.render = render;
script.__file = \\"__tests__/fixtures/test.vue\\";

module.exports = script;
"
`;

exports[`rollup plugin > works with vue 2 1`] = `
"'use strict';

var bundle = require('@fluent/bundle');

var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',[_vm._v(_vm._s(_vm.$t('hello-user', { userName: _vm.userName })))]),_c('div',[_vm._v(_vm._s(_vm.$t('shared-photos', { userName: _vm.userName, photoCount: _vm.photoCount, userGender: _vm.userGender })))])])};
var staticRenderFns = [];
render._withStripped = true;

function normalizeComponent (
    scriptExports,
    render,
    staticRenderFns,
    functionalTemplate,
    injectStyles,
    scopeId,
    moduleIdentifier, /* server only */
    shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
      ? scriptExports.options
      : scriptExports;

  // render functions
  if (render) {
    options.render = render;
    options.staticRenderFns = staticRenderFns;
    options._compiled = true;
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true;
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId;
  }

  var hook;
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
          context || // cached call
          (this.$vnode && this.$vnode.ssrContext) || // stateful
          (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__;
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context);
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook;
  } else if (injectStyles) {
    hook = shadowMode
        ? function () {
          injectStyles.call(
              this,
              (options.functional ? this.parent : this).$root.$options.shadowRoot
          );
        }
        : injectStyles;
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook;
      // register for functional component in vue file
      var originalRender = options.render;
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context);
        return originalRender(h, context)
      };
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate;
      options.beforeCreate = existing
          ? [].concat(existing, hook)
          : [hook];
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}

function block0 (Component) {
  const target = Component.options || Component;
  target.fluent = target.fluent || {};
  target.fluent['en'] = new bundle.FluentResource(\`







# Simple things are simple.
hello-user = Hello, {$userName}!

# Complex things are possible.
shared-photos =
  {$userName} {$photoCount ->
     [one] added one photo
    *[other] added {$photoCount} new photos
  } to {$userGender ->
     [male] his stream
     [female] her stream
    *[other] their stream
  }.
\`);
}

const __vue2_script = {};
const __cssModules = {};
var __component__ = /*#__PURE__*/normalizeComponent(
  __vue2_script,
  render,
  staticRenderFns,
  false,
  __vue2_injectStyles,
  null,
  null,
  null
);

function __vue2_injectStyles (context) {
  for(let o in __cssModules){
    this[o] = __cssModules[o];
  }
}
if (typeof block0 === 'function') block0(__component__);

__component__.options.__file = \\"__tests__/fixtures/test.vue\\";
var test = /*#__PURE__*/(function () { return __component__.exports })();

module.exports = test;
"
`;
